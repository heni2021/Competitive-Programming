Question Link: https://codeforces.com/problemset/problem/1714/C
Logic: We will try to subtract maximum number from a given n once and repeat the same thing till we get 0 after subtraction. Then we need to reverse the number in
order to get the required answer.

TIME COMPLEXITY: O(N)
SPACE COMPLEXITY: O(1)

JAVA CODE:-
import java.util.Scanner;
public class Solution
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int test = sc.nextInt();
        for(int g=0;g<test;g++)
        {
            int n = sc.nextInt();
            int made = 0;
            if(n-9>=0)
            {
                n-=9;
                made = made*10 + 9;
            }
            if(n-8>=0)
            {
                n-=8;
                made = made*10 + 8;
            }
            if(n-7>=0)
            {
                n-=7;
                made = made*10 + 7;
            }
            if(n-6>=0)
            {
                n-=6;
                made = made*10 + 6;
            }
            if(n-5>=0)
            {
                n-=5;
                made = made*10 + 5;
            }
            if(n-4>=0)
            {
                n-=4;
                made = made*10 + 4;
            }
            if(n-3>=0)
            {
                n-=3;
                made = made*10 + 3;
            }
            if(n-2>=0)
            {
                n-=2;
                made = made*10 + 2;
            }
            if(n-1>=0)
            {
                n-=1;
                made = made*10 + 1;
            }
            int ans = 0;
            while(made!=0)
            {
                ans = ans*10 + (made%10);
                made/=10;
            }
            System.out.println(ans);
        }
    }
}  
